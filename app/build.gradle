plugins {
    id 'com.android.application'
    id 'com.google.gms.google-services'
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.weberbox.pifire"
        minSdk 26
        targetSdk 31
        versionCode 2
        versionName "1.1.0-rc1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags ''
            }
        }
    }

    buildTypes {
        release {
            manifestPlaceholders = [appName: "PiFire", pathName: "com.weberbox.pifire"]
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            manifestPlaceholders = [appName: "PiFire Debug", pathName: "com.weberbox.pifire.debug"]
            applicationIdSuffix ".debug"
            debuggable true
        }
    }

    flavorDimensions "type", "version"
    productFlavors {
        nonfirebase {
            dimension "version"
            buildConfigField("boolean", "IS_FIREBASE", "false")
            ext.useGoogleGcm = false
        }
        firebase {
            dimension "version"
            buildConfigField("boolean", "IS_FIREBASE", "true")
            ext.useGoogleGcm = true
        }
        dev {
            dimension "type"
            try {
                apply from: '/src/dev/secrets.gradle'
            } catch (MissingResourceException ignored) {
                logger.error('Dev Secrets file not found falling back to Compile Secrets')
                apply from: '/src/compile/secrets.gradle'
            }
            externalNativeBuild {
                cmake {
                    cppFlags "-DACRA_URL=" + acraUrl
                    cppFlags "-DACRA_LOGIN=" + acraLogin
                    cppFlags "-DACRA_AUTH=" + acraAuth
                    arguments "-DFLAVOR=DEV"
                }
            }
        }
        github {
            dimension "type"
            try {
                apply from: '/src/github/secrets.gradle'
            } catch (MissingResourceException ignored) {
                logger.error('Github Secrets file not found falling back to Compile Secrets')
                apply from: '/src/compile/secrets.gradle'
            }
            externalNativeBuild {
                cmake {
                    cppFlags "-DACRA_URL=" + acraUrl
                    cppFlags "-DACRA_LOGIN=" + acraLogin
                    cppFlags "-DACRA_AUTH=" + acraAuth
                    arguments "-DFLAVOR=GITHUB"
                }
            }
        }
        compile {
            dimension "type"
            apply from: '/src/compile/secrets.gradle'
            externalNativeBuild {
                cmake {
                    cppFlags "-DACRA_URL=" + acraUrl
                    cppFlags "-DACRA_LOGIN=" + acraLogin
                    cppFlags "-DACRA_AUTH=" + acraAuth
                    arguments "-DFLAVOR=COMPILE"
                }
            }
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        if (names.contains("github") && names.contains("firebase")) {
            setIgnore(true)
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    externalNativeBuild {
       cmake {
           path file('CMakeLists.txt')
           version '3.10.2'
        }
    }

    buildFeatures {
        viewBinding true
    }

    applicationVariants.all { variant ->
        def appName
        if (project.hasProperty("applicationName")) {
            appName = applicationName
        } else {
            appName = parent.name.toLowerCase()
        }
        def dimension_one = variant.productFlavors[0].name
        def dimension_two = variant.productFlavors[1].name
        def buildType = variant.buildType.name
        def version = variant.versionName

        variant.outputs.all { output ->
            outputFileName = "${appName}-${dimension_one}-${dimension_two}-${buildType}${version}.apk"
        }
    }

    if(project.hasProperty("pifire.signing")
            && new File(project.property("pifire.signing") + ".gradle").exists()) {
        apply from: project.property("pifire.signing") + ".gradle";
    }
}

dependencies {
    def acraVersion = '5.8.4'

    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    implementation 'com.google.code.gson:gson:2.8.7'
    implementation 'androidx.core:core-splashscreen:1.0.0-alpha02'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.navigation:navigation-fragment:2.3.5'
    implementation 'androidx.navigation:navigation-ui:2.3.5'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.security:security-crypto:1.0.0'
    implementation 'com.pixplicity.easyprefs:EasyPrefs:1.10.0'
    implementation 'com.journeyapps:zxing-android-embedded:4.2.0'
    implementation 'nl.joery.animatedbottombar:library:1.1.0'
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
    implementation 'com.github.skydoves:powerspinner:1.1.9'
    implementation "ch.acra:acra-http:$acraVersion"
    implementation "ch.acra:acra-notification:$acraVersion"
    implementation "ch.acra:acra-limiter:$acraVersion"
    implementation 'com.jakewharton.timber:timber:5.0.1'
    testImplementation 'junit:junit:4.13.2'
    firebaseImplementation platform('com.google.firebase:firebase-bom:28.4.0')
    firebaseImplementation 'com.google.firebase:firebase-messaging'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation ('io.socket:socket.io-client:2.0.1') {
        exclude group: 'org.json', module: 'json'
    }


    afterEvaluate {
        for (flavor in android.productFlavors) {
            if (flavor.name.contains("firebase")) {
                tasks.matching {
                    it.name.contains('GoogleServices') && it.name.contains(flavor.name.capitalize())
                }*.enabled = flavor.ext.useGoogleGcm
            }
        }
    }
}